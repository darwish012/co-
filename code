 org 100h

addkey MACRO p1, p2
    LOCAL label1
 mov SI,0
 label1:
 
 
 MOV AL, p2[SI]
 MOV BL, p1[SI]
 XOR AL,BL
 MOV p1[SI],AL
 INC SI
 CMP SI,16
 JNE label1
 
ENDM





    subbytes MACRO p1, p2
  LOCAL label1
 mov SI,0
 label1:
 
 xor BX,BX
 MOV BL, p1[SI]
 MOV AL, p2[BX]

 MOV p1[SI],AL
 INC SI
 CMP SI,16
 JNE label1
 
ENDM







MACRO shiftrows A,x
LOCAL L1
;first row

MOV AL,a[0]
MOV x[0],AL

MOV AL,a[1]
MOV x[1],AL

MOV AL,a[2]
MOV x[2],AL

MOV AL,a[3]
MOV x[3],AL

;second row

MOV AL,a[5]
MOV x[4],AL

MOV AL,a[6]
MOV x[5],AL

MOV AL,a[7]
MOV x[6],AL

MOV AL,a[4]
MOV x[7],AL

;third row

MOV AL,a[10]
MOV x[8],AL

MOV AL,a[11]
MOV x[9],AL

MOV AL,a[8]
MOV x[10],AL

MOV AL,a[9]
MOV x[11],AL

;fourth row

MOV AL,a[15]
MOV x[12],AL

MOV AL,a[12]
MOV x[13],AL

MOV AL,a[13]
MOV x[14],AL

MOV AL,a[14]
MOV x[15],AL

MOV BL,0
L1: 
    mov AL,x[BX] 
    mov a[BX],AL
    inc BL
    cmp BL,16
    jne L1



ENDM


 MACRO mix_coloumns r,a,b,c
          LOCAL m1,m2,L1
          MOV SI,0
    MOV BP,0
    MOV BL,0
    m2:
    m1:
    MOV DI,0
     MOV DL,r[SI]
         MOV DH,a[BP]
         decide_then_execute DL,DH
         MOV b[DI],AL
         
         MOV DL,r[SI+1]
         MOV DH,a[BP+4]
         decide_then_execute DL,DH
         MOV b[DI+1],AL
         MOV DL,r[SI+2]
         MOV DH,a[BP+8]
         decide_then_execute DL,DH
         MOV b[DI+2],AL
          MOV DL,r[SI+3]
         MOV DH,a[BP+12]
         decide_then_execute DL,DH
         MOV b[DI+3],AL
           ;xoring all values in b
          
          MOV AL,b[DI]
          XOR AL,b[DI+1]
          XOR AL,b[DI+2]
          XOR AL,b[DI+3]
          ADD BX,SI
          MOV c[BX],AL
          MOV BX,BP
         ADD SI,4
         CMP SI,16
         JNE m1
         INC BP
         INC BL
         MOV SI,0
         CMP BP,4
         JNE m2
        
       MOV BL,0
       MOV BH,0
       L1: 
    mov AL,c[BX] 
    mov a[BX],AL
    inc BL
    cmp BL,16
    jne L1
    
  
  
  ENDM

 
 
MACRO decide_then_execute n,x
     LOCAL L3,L4,L5,END1
    
      
    
    
    
    
    cmp n,001H
    JZ L3
    cmp n,002H
    JZ L4
    cmp n,003H
    JZ L5
     
      L3: MOV AL,X 
           JMP END1
     
     L4: multiply_two x 
           JMP END1
             
    L5:multiply_three x
           JMP END1
    
    END1:
     ENDM     
            




MACRO multiply_two x
    LOCAL L1,END2
    
    
    
    
    MOV AL,x
    ADD AL,0
    JNS L1
    SHL AL, 1
    
    MOV CL, 1Bh
    XOR AL,CL
  
    JMP END2
   L1: SHL AL, 1
         JMP END2
    
    
 END2:   
ENDM 

MACRO multiply_three x
      multiply_two x
      XOR AL,x

ENDM



         
 keysh MACRO ke,rcon,sbox,z,newkey
  LOCAL label1,L1,L2,L3,L4,L5
 ;ROTWORD         ,L
  MOV AL,ke[7]
MOV z[0],AL

MOV AL,ke[11]
MOV z[1],AL

MOV AL,ke[15]
MOV z[2],AL

MOV AL,ke[3]
MOV z[3],AL  
 
 mov SI,0
 label1:
 

 MOV BL, z[SI]
 MOV AL, sbox[BX]

 MOV z[SI],AL
 INC SI
 CMP SI,4
 JNE label1 
 MOV SI,0
 XOR AX,AX
 MOV DI,0
 MOV BL,0 
 L1:
   MOV AL,ke[DI]
   MOV AH,z[BX]
   XOR AL,AH
    
   MOV AH,rcon[BP+SI]
   XOR AL,AH
   MOV newkey[DI],AL
   INC BL 
   ADD DI,4
   ADD SI,10
   CMP BL,4
   
   JNZ L1
   MOV SI,0 
  MOV BP,1 
  L2: 
 
   MOV AL,key[BP]
   MOV AH,newkey[SI]
   XOR AL,AH
   MOV newkey[BP],AL
   ADD SI,4
   ADD BP,4
   CMP SI,16
   JNZ L2
    
    MOV SI,1 
  MOV BP,2 
  L3: 
 
   MOV AL,key[BP]
   MOV AH,newkey[SI]
   XOR AL,AH
   MOV newkey[BP],AL
   ADD SI,4
   ADD BP,4
   CMP SI,17
   JNZ L3 
    
    MOV SI,2 
  MOV BP,3 
  L5: 
 
   MOV AL,key[BP]
   MOV AH,newkey[SI]
   XOR AL,AH
   MOV newkey[BP],AL
   ADD SI,4
   ADD BP,4
   CMP SI,18
   JNZ L5 
    
 
       MOV BL,0
       MOV BH,0
       L4: 
    mov AL,newkey[BX] 
    mov key[BX],AL
    inc BL
    cmp BL,16
    jne L4
    
 


  ENDM


 

       ;123456789ABCDEF03243BCD344F472BD
 
 
 .data segment  
    Ainput DB 35,?,35 DUP(?)
   
      rcon     DB 01H,02H,04H,08H,10H,20H,40H,80H,1BH,36H
            DB 00H,00H,00H,00H,00H,00H,00H,00H,00H,00H
            DB 00H,00H,00H,00H,00H,00H,00H,00H,00H,00H
            DB 00H,00H,00H,00H,00H,00H,00H,00H,00H,00H
    

     a DB 000H,000H,000H,000H
       DB 000H,000H,000H,000H
       DB 000H,000H,000H,000H
       DB 000H,000H,000H,000H
       
    key    DB 02bH,028H,0abH,09H
       DB 07eH,0aeH,0F7H,0cfH
       DB 015H,0d2H,015H,04fH
       DB 016H,0a6H,088H,03cH
   
    x DB 000h,000h,000h,000h
      DB 000h,000h,000h,000h
      DB 000h,000h,000h,000h
     DB 000h,000h,000h,000h
     
     newkey DB 000h,000h,000h,000h
      DB 000h,000h,000h,000h
      DB 000h,000h,000h,000h
      DB 000h,000h,000h,000h    
      
       z DB 000h,000h,000h,000h



    sbox   DB 063H,07cH,077H,07bH,0f2H,06bH,06fH,0c5H,030H,001H,067H,02bH,0feH,0d7H,0abH,076H
DB 0caH,082H,0c9H,07dH,0faH,059H,047H,0f0H,0adH,0d4H,0a2H,0afH,09cH,0a4H,072H,0c0H
DB 0b7H,0fdH,093H,026H,036H,03fH,0f7H,0ccH,034H,0a5H,0e5H,0f1H,071H,0d8H,031H,015H
DB 004H,0c7H,023H,0c3H,018H,096H,005H,09aH,007H,012H,080H,0e2H,0ebH,027H,0b2H,075H
DB 009H,083H,02cH,01aH,01bH,06eH,05aH,0a0H,052H,03bH,0d6H,0b3H,029H,0e3H,02fH,084H
DB 053H,0d1H,000H,0edH,020H,0fcH,0b1H,05bH,06aH,0cbH,0beH,039H,04aH,04cH,058H,0cfH
DB 0d0H,0efH,0aaH,0fbH,043H,04dH,033H,085H,045H,0f9H,002H,07fH,050H,03cH,09fH,0a8H
DB 051H,0a3H,040H,08fH,092H,09dH,038H,0f5H,0bcH,0b6H,0daH,021H,010H,0ffH,0f3H,0d2H
DB 0cdH,00cH,013H,0ecH,05fH,097H,044H,017H,0c4H,0a7H,07eH,03dH,064H,05dH,019H,073H
DB 060H,081H,04fH,0dcH,022H,02aH,090H,088H,046H,0eeH,0b8H,014H,0deH,05eH,00bH,0dbH
DB 0e0H,032H,03aH,00aH,049H,006H,024H,05cH,0c2H,0d3H,0acH,062H,091H,095H,0e4H,079H
DB 0e7H,0c8H,037H,06dH,08dH,0d5H,04eH,0a9H,06cH,056H,0f4H,0eaH,065H,07aH,0aeH,008H
DB 0baH,078H,025H,02eH,01cH,0a6H,0b4H,0c6H,0e8H,0ddH,074H,01fH,04bH,0bdH,08bH,08aH
DB 070H,03eH,0b5H,066H,048H,003H,0f6H,00eH,061H,035H,057H,0b9H,086H,0c1H,01dH,09eH
DB 0e1H,0f8H,098H,011H,069H,0d9H,08eH,094H,09bH,01eH,087H,0e9H,0ceH,055H,028H,0dfH
DB 08cH,0a1H,089H,00dH,0bfH,0e6H,042H,068H,041H,099H,02dH,00fH,0b0H,054H,0bbH,016H


    
    r DB 002H,003H,001H,001H
      DB 001H,002H,003H,001H
      DB 001H,001H,002H,003H
      DB 003H,001H,001H,002H  
   
   
   b DB 000h,000h,000h,000h
   
   c DB 000h,000h,000h,000h
     DB 000h,000h,000h,000h
     DB 000h,000h,000h,000h
     DB 000h,000h,000h,000h

       output DB 000H,000H,000H,000H
              DB 000H,000H,000H,000H
              DB 000H,000H,000H,000H
              DB 000H,000H,000H,000H
              DB 000H,000H,000H,000H
              DB 000H,000H,000H,000H
              DB 000H,000H,000H,000H
              DB 000H,000H,000H,000H
              

     outis DB ' outis:   ', '$'




  .code segment
       CALL Input
       
       
       
       addkey a,key   
       
       
       ;;;;9 main rounds
       ;1st round
       subbytes a,sbox
       shiftrows a,x
       mix_coloumns  r,a,b,c
        MOV BP,0
         keysh  key,rcon,sbox,z,newkey
       addkey a,key  
       ;2nd
       subbytes a,sbox
       shiftrows a,x
       mix_coloumns  r,a,b,c
       MOV BP,1
         keysh  key,rcon,sbox,z,newkey
      
       addkey a,key 
       ;3rd
       subbytes a,sbox
       shiftrows a,x
       mix_coloumns  r,a,b,c
        MOV BP,2
         keysh  key,rcon,sbox,z,newkey
       addkey a,key 
       ;4th
       subbytes a,sbox
       shiftrows a,x
       mix_coloumns  r,a,b,c
       
        MOV BP,3
         keysh  key,rcon,sbox,z,newkey
       
       addkey a,key 
       ;5th
       subbytes a,sbox
       shiftrows a,x
       mix_coloumns  r,a,b,c
        MOV BP,4
         keysh  key,rcon,sbox,z,newkey
       addkey a,key 
       ;6th
       subbytes a,sbox
       shiftrows a,x
       mix_coloumns  r,a,b,c
       MOV BP,5
         keysh  key,rcon,sbox,z,newkey
      
       addkey a,key 
       ;7th
       subbytes a,sbox
       shiftrows a,x
       mix_coloumns  r,a,b,c
      
       MOV BP,6
         keysh  key,rcon,sbox,z,newkey
       addkey a,key 
       ;8th
       subbytes a,sbox
       shiftrows a,x
       mix_coloumns  r,a,b,c
       MOV BP,7
         keysh  key,rcon,sbox,z,newkey
       addkey a,key 
       ;9th
       subbytes a,sbox
       shiftrows a,x
       mix_coloumns  r,a,b,c
       MOV BP,8
         keysh  key,rcon,sbox,z,newkey
       addkey a,key 
       ;finalround
       subbytes a,sbox
       shiftrows a,x
       MOV BP,9
         keysh  key,rcon,sbox,z,newkey
      
       addkey a,key 
       MOV AH,09h
       MOV DX, OFFSET outis
       INT 21H
       
       CALL outputdis
     
    
       

 ret




proc Input   
    MOV DX, OFFSET Ainput
    MOV AH,0Ah
    INT 21H
    call helper
ret
endp


proc helper
    MOV SI,2
    MOV BP,0
    z1: 
    MOV AL,Ainput[SI]
     CMP AL,3Ah   ;compare the input whether it is letter or digit.39h is the ascii value of 9 
    
    JGE LETTER1
          
      SUB AL,48   ;if it is digit then convert it's ascii value to real value by masking
      JMP SHIFT1
          
      LETTER1:          ;if it is letter then subtract 37h from it to find it's real value
          SUB AL,37H
       
      SHIFT1:
          MOV BL,AL
          SAL BL,4    ;shift bx 4 digit left for taking next value
             ;making 'or' will add the current value with previous value
     MOV AL,Ainput[SI+1]
     CMP AL,3Ah   ;compare the input whether it is letter or digit.39h is the ascii value of 9 
    
    JGE LETTER2
          
      SUB AL,48   ;if it is digit then convert it's ascii value to real value by masking
      JMP SHIFT2
          
      LETTER2:          ;if it is letter then subtract 37h from it to find it's real value
          SUB AL,37H
       
      SHIFT2:
                 ;shift bx 4 digit left for taking next value
         ADD   BL,AL    ;making 'or' will add the current value with previous value
      MOV a[BP],BL
      ADD SI,2
      ADD BP,1
      CMP BP,16
      JNE z1
        MOV SI,34
        MOV Ainput[SI], '$'
    
    
    mov BL,0
MOV BH,0    
  
    
    
     ret
     endp





  
  
proc helperoutput
     MOV SI,0
     MOV BP,0
    n1:          
    
     MOV AL,a[SI]
     MOV AH,a[SI]
     SAL AL,4
     SHR AL,4
     SHR AH,4
     CMP AL,9
     JG LETT1
     ADD AL,48
     JMP TWO
     LETT1:
      ADD AL,37H
      
     TWO: 
     CMP AH,9
     JG LETT2
     ADD AH,48
     JMP END3
     LETT2:
      ADD AH,37H
      
     END3:
      MOV OUTPUT[BP],AH
     MOV OUTPUT[BP+1],AL
  
     INC SI
     ADD BP,2
     CMP SI,16
     JNE n1
  
     
     
      
    
    
    
  ret
endp

  
PROC Outputdis

   CALL helperoutput
                    
                  
mov BL,0
MOV BH,0
    
    MOV AL,output[BX]
    MOV Ainput[BX+2],AL
    INC BL
     MOV AL,output[BX]
    MOV Ainput[BX+2],AL
    INC BL
     MOV AL,output[BX]
    MOV Ainput[BX+2],AL
    INC BL
     MOV AL,output[BX]
    MOV Ainput[BX+2],AL
    INC BL
     MOV AL,output[BX]
    MOV Ainput[BX+2],AL
    INC BL
     MOV AL,output[BX]
    MOV Ainput[BX+2],AL
    INC BL
     MOV AL,output[BX]
    MOV Ainput[BX+2],AL
    INC BL
     MOV AL,output[BX]
    MOV Ainput[BX+2],AL
    INC BL
     MOV AL,output[BX]
    MOV Ainput[BX+2],AL
    INC BL
     MOV AL,output[BX]
    MOV Ainput[BX+2],AL
    INC BL
     MOV AL,output[BX]
    MOV Ainput[BX+2],AL
    INC BL
     MOV AL,output[BX]
    MOV Ainput[BX+2],AL
    INC BL
     MOV AL,output[BX]
    MOV Ainput[BX+2],AL
    INC BL
     MOV AL,output[BX]
    MOV Ainput[BX+2],AL
    INC BL
     MOV AL,output[BX]
    MOV Ainput[BX+2],AL
    INC BL 
    MOV AL,output[BX]
    MOV Ainput[BX+2],AL
    INC BL
     MOV AL,output[BX]
    MOV Ainput[BX+2],AL
    INC BL
     MOV AL,output[BX]
    MOV Ainput[BX+2],AL
    INC BL
     MOV AL,output[BX]
    MOV Ainput[BX+2],AL
    INC BL
     MOV AL,output[BX]
    MOV Ainput[BX+2],AL
    INC BL
     MOV AL,output[BX]
    MOV Ainput[BX+2],AL
    INC BL
     MOV AL,output[BX]
    MOV Ainput[BX+2],AL
    INC BL
     MOV AL,output[BX]
    MOV Ainput[BX+2],AL
    INC BL
     MOV AL,output[BX]
    MOV Ainput[BX+2],AL
    INC BL
     MOV AL,output[BX]
    MOV Ainput[BX+2],AL
    INC BL
     MOV AL,output[BX]
    MOV Ainput[BX+2],AL
    INC BL
     MOV AL,output[BX]
    MOV Ainput[BX+2],AL
    INC BL
    
     MOV AL,output[BX]
    MOV Ainput[BX+2],AL
    INC BL
     MOV AL,output[BX]
    MOV Ainput[BX+2],AL
    INC BL
     MOV AL,output[BX]
    MOV Ainput[BX+2],AL
    INC BL
     MOV AL,output[BX]
    MOV Ainput[BX+2],AL
    INC BL
     MOV AL,output[BX]
    MOV Ainput[BX+2],AL
    INC BL
    
    



MOV AH,09h
MOV DX, OFFSET Ainput+2

INT 21H
   ret

  endp







  ret
